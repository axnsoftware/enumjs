#
# Copyright 2011 axn software UG (haftungsbeschrÃ¤nkt)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

PROJECT = enumjs

INSTALL_ROOT = /usr/local/share/node_modules

include Makefile.decl.in

CURRENTDIR = .
SOURCEDIR := $(CURRENTDIR)/src
BUILDDIR := $(CURRENTDIR)/build

COFFEELIBDIRS = $(SRCLIBDIRS:$(SOURCEDIR)%=$(BUILDDIR)/coffee%)
COFFEELIB = $(SRCLIB:$(SOURCEDIR)/%=$(BUILDDIR)/coffee/%)

COFFEETESTDIRS = $(SRCTESTDIRS:$(SOURCEDIR)%=$(BUILDDIR)/coffee%)
COFFEETEST = $(SRCTEST:$(SOURCEDIR)%=$(BUILDDIR)/coffee%)

JSLIBDIRS = $(SRCLIBDIRS:$(SOURCEDIR)%=$(BUILDDIR)/js%)
JSLIB = $(SRCLIB:$(SOURCEDIR)%.coffee=$(BUILDDIR)/js%.js)

JSTESTDIRS = $(SRCTESTDIRS:$(SOURCEDIR)%=$(BUILDDIR)/js%)
JSTEST = $(SRCTEST:$(SOURCEDIR)%.coffee=$(BUILDDIR)/js%.js)

JSCOVTEST = $(JSTEST:$(BUILDDIR)/js%=$(BUILDDIR)/jscov%)

GIT_BIN = `which git`
EYES_LIB = ./node_modules/eyes/lib/eyes.js
VOWS_BIN = ./node_modules/vows/bin/vows
COFFEE_BIN = ./node_modules/coffee-script/bin/coffee
NODE_BIN = `which node`
NODE_VER = `$$(which node) --version`
JSCOVERAGE_BIN = ./node_modules/node-jscoverage/jscoverage


.PHONY: prerequisites compile-pre compile test-pre test test-post install uninstall clean clean-modules help debug $(JSCOVTEST)

help:
	@echo "Configure first: ./configure"
	@echo "Existing make targets:"
	@echo "all -- everything"
	@echo "clean -- clean the built except the node_modules, after that ./configure needs to be run again"
	@echo "clean-test -- cleans the test build"
	@echo "clean-modules -- cleans the node_modules"
	@echo "compile -- compiles the sources and the tests"
	@echo "test -- runs the unit tests"
	@echo "install -- installs the software, may require root priviledge"
	@echo "uninstall -- uninstalls the software, may require root priviledge"


debug:
	@echo $(CURRENTDIR)
	@echo $(SOURCEDIR)
	@echo $(BUILDDIR)
	@echo $(SRCLIBDIRS)
	@echo $(SRCLIB)
	@echo $(SRCTESTDIRS)
	@echo $(SRCTEST)
	@echo $(COFFEELIBDIRS)
	@echo $(COFFEELIB)
	@echo $(COFFEETESTDIRS)
	@echo $(COFFEETEST)
	@echo $(JSLIBDIRS)
	@echo $(JSLIB)
	@echo $(JSTESTDIRS)
	@echo $(JSTEST)
	@echo $(JSCOVTEST)


all: prerequisites $(JSCOVERAGE_BIN) compile test


#
# CLEAN TARGETS
#

clean:
	@-rm -Rf build
	@-rm -f ./install.log
	@-rm -f ./Makefile.decl.in
	@-rm -f ./Makefile

clean-test:
	@-rm -Rf build/jscov

clean-modules: 
	@-rm -rf node_modules/eyes
	@-rm -rf node_modules/vows
	@-rm -rf node_modules/node-jscoverage
	@-rm -rf node_modules/coffee-script


#
# COMPILE TARGETS
#

compile: compile-pre $(COFFEELIB) $(COFFEETEST) $(JSLIB) $(JSTEST)

compile-pre: $(COFFEELIBDIRS) $(COFFEETESTDIRS) $(JSLIBDIRS) $(JSTESTDIRS) 

$(COFFEELIB) $(COFFEETEST) : $(SRCLIB) $(SRCTEST)
	@cp $(@:build/coffee/%=src/%) $@

$(JSLIB) $(JSTEST) : $(SRCLIB) $(SRCTEST)
	@$(COFFEE_BIN) -o `dirname $@` -c $(@:build/js/%.js=src/%.coffee)
	@-sed -r "s/[.]coffee(['\"][^)]*[)])/.js\1/g" -i $@

$(COFFEELIBDIRS) $(COFFEETESTDIRS) $(JSLIBDIRS) $(JSTESTDIRS):
	@mkdir -p $@


#
# TEST TARGETS
#

test: test-pre $(JSCOVTEST)

test-pre:
	@$(JSCOVERAGE_BIN) --no-instrument=test build/js build/jscov

$(JSCOVTEST):
	@$(VOWS_BIN) --cover-html --xunit $@ > $@.results.xml; \
	 RC=$${?}; \
	 mv coverage.html $@.coverage.html; \
	 exit $$RC;
#	@-$(VOWS_BIN) --cover-json --json $@ > $@.results.json
#	@-mv coverage.json $@.coverage.json
#	$(VOWS_BIN) --spec $@


#
# PREREQUISITES TARGETS
#

prerequisites:
	@echo "Checking prerequisites..."
	@echo -n "-> checking availability of node..." \
		&& ( test -f "$(NODE_BIN)" && echo "FOUND. (Path: $(NODE_BIN); Version: $(NODE_VER).)" ) \
		|| ( echo; echo "-> ERR node is not available. Install node version 0.5.x or greater first."; exit 1);
	@echo -n "-> checking console.dir()..." \
		&& ( $(NODE_BIN) >/dev/null -e "var t = function() {}; t.f = function() { throw new Error(); }; console.dir(t);" && echo "OK." ) \
		|| ( echo; echo "-> ERR console.dir() is broken. Use node version 0.5.x or greater. (Version: ${NODE_VER}.)"; exit 1 );
	@echo "-> initializing submodules in ./node_modules" \
		&& $(GIT_BIN) submodule init \
		|| ( echo "-> ERR unable to initialize submodules."; exit 1 );
	@echo "-> updating submodules in ./node_modules" \
		&& $(GIT_BIN) submodule update \
		|| ( echo "-> ERR unable to update submodules."; exit 1 );
	@echo "-> synchronizing submodules in ./node_modules" \
		&& $(GIT_BIN) submodule sync \
		|| ( echo "-> ERR unable to synchronize submodules."; exit 1 );
	@echo -n "-> checking availability of ./node_modules/vows..." \
		&& ( test -f $(VOWS_BIN) && echo "FOUND." ) \
		|| ( echo; echo "-> ERR ./node_modules/vows is not available."; exit 1);
	@echo -n "-> checking whether $(VOWS_BIN) is executable..." \
		&& ( test -x $(VOWS_BIN) && echo "OK." ) \
		|| ( echo; echo "-> ERR $(VOWS_BIN) is not executable."; exit 1);
	@echo -n "-> checking availability of ./node_modules/eyes..." \
		&& ( test -f $(EYES_LIB) && echo "FOUND." ) \
		|| ( echo; echo "-> ERR ./node_modules/eyes is not available."; exit 1);

$(JSCOVERAGE_BIN):
	cd node_modules/node-jscoverage \
		&& ./configure \
		&& make


#
# INSTALL TARGETS
#

install: all
	@echo "Installing..."
	@:>install.log
	@( \
		echo "Installing..."; \
		install -v -d -m 655 $(INSTALL_ROOT) \
		&& install -v -d -m 655 $(INSTALL_ROOT)/enumjs \
		&& install -v -d -m 655 $(INSTALL_ROOT)/enumjs/lib \
		&& install -v -d -m 655 $(INSTALL_ROOT)/enumjs/lib/http \
		&& install -v -m 644 -t $(INSTALL_ROOT)/enumjs/ package.json \
		&& install -v -m 644 -t $(INSTALL_ROOT)/enumjs/ README.md \
		&& install -v -m 644 -t $(INSTALL_ROOT)/enumjs/ LICENSE \
		&& install -v -m 644 -t $(INSTALL_ROOT)/enumjs/lib/ build/js/lib/enumjs.js \
		&& install -v -m 644 -t $(INSTALL_ROOT)/enumjs/lib/http/ build/js/lib/http/EHttpStatus.js \
	) 2>>install.log >>install.log \
	|| ( \
		echo "Installation failed. Rolling back the operation..."; \
                ( \
			echo "Installation failed. Rolling back the operation..."; \
			( test -f $(INSTALL_ROOT)/enumjs/lib/http/EHttpStatus.js && rm -f $(INSTALL_ROOT)/enumjs/lib/http/EHttpStatus.js ) \
			&& ( test -f $(INSTALL_ROOT)/enumjs/lib/enumjs.js && rm -f $(INSTALL_ROOT)/enumjs/lib/enumjs.js ) \
			&& ( test -f $(INSTALL_ROOT)/enumjs/README.md && rm -f $(INSTALL_ROOT)/enumjs/README.md ) \
			&& ( test -f $(INSTALL_ROOT)/enumjs/LICENSE && rm -f $(INSTALL_ROOT)/enumjs/LICENSE ) \
			&& ( test -f $(INSTALL_ROOT)/enumjs/package.json && rm -f $(INSTALL_ROOT)/enumjs/package.json ) \
			&& ( test -d $(INSTALL_ROOT)/enumjs/lib/http && rmdir $(INSTALL_ROOT)/enumjs/lib/http ) \
			&& ( test -d $(INSTALL_ROOT)/enumjs/lib/ && rmdir $(INSTALL_ROOT)/enumjs/lib/ ) \
			&& ( test -d $(INSTALL_ROOT)/enumjs/ && rmdir $(INSTALL_ROOT)/enumjs/ ) \
                        && ( test -d $(INSTALL_ROOT)/ && rmdir $(INSTALL_ROOT)/ ) \
			&& echo "Successfully removed partly installed package." \
                ) 2>>install.log >>install.log \
		|| ( echo "Removal of package or artifacts thereof failed. See install.log for more information."; exit 1 ); \
		echo "Successfully removed partly installed package." \
	)
	@echo "Installation was successful. See install.log for more information."

uninstall:
	@echo "Uninstalling..."
	@( \
		echo "Uninstalling..."; \
		( test -f $(INSTALL_ROOT)/enumjs/lib/http/EHttpStatus.js && rm -f $(INSTALL_ROOT)/enumjs/lib/http/EHttpStatus.js ) \
		&& ( test -f $(INSTALL_ROOT)/enumjs/lib/enumjs.js && rm -f $(INSTALL_ROOT)/enumjs/lib/enumjs.js ) \
		&& ( test -f $(INSTALL_ROOT)/enumjs/README.md && rm -f $(INSTALL_ROOT)/enumjs/README.md ) \
		&& ( test -f $(INSTALL_ROOT)/enumjs/LICENSE && rm -f $(INSTALL_ROOT)/enumjs/LICENSE ) \
		&& ( test -f $(INSTALL_ROOT)/enumjs/package.json && rm -f $(INSTALL_ROOT)/enumjs/package.json ) \
		&& ( test -d $(INSTALL_ROOT)/enumjs/lib/http && rmdir $(INSTALL_ROOT)/enumjs/lib/http ) \
		&& ( test -d $(INSTALL_ROOT)/enumjs/lib/ && rmdir $(INSTALL_ROOT)/enumjs/lib/ ) \
		&& ( test -d $(INSTALL_ROOT)/enumjs/ && rmdir $(INSTALL_ROOT)/enumjs/ ) \
		&& ( test -d $(INSTALL_ROOT)/ && rmdir $(INSTALL_ROOT)/ ) \
		&& echo "Successfully removed installed package." \
	) 2>>install.log >>install.log \
	|| ( echo "Removal of package or artifacts thereof failed. See install.log for more information."; exit 1 );
	@echo "Successfully removed installed package."

